<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux安装nginx</title>
      <link href="/posts/b22b661e.html"/>
      <url>/posts/b22b661e.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、安装依赖（安装的跳过）"><a href="#一、安装依赖（安装的跳过）" class="headerlink" title="一、安装依赖（安装的跳过）"></a>一、安装依赖（安装的跳过）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl-devel</span><br></pre></td></tr></table></figure><h4 id="二、下载-nginx-稳定版"><a href="#二、下载-nginx-稳定版" class="headerlink" title="二、下载 nginx 稳定版"></a>二、下载 nginx 稳定版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.16.1.tar.gz </span><br></pre></td></tr></table></figure><p>该命令会下载到此刻用户所在的目录</p><p>或者去<a href="http://nginx.org/en/download.html">nginx 官网</a> 下载上传</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930151244240.png" alt="image-20220930151244240"></p><h4 id="三、解压"><a href="#三、解压" class="headerlink" title="三、解压"></a>三、解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.22.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h4><p>进入解压目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /nginx-1.22.0</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 需要使用https执行指令</span><br><span class="line">./configure  --with-http_ssl_module</span><br><span class="line"># 需要使用stream</span><br><span class="line">./configure --with-stream</span><br><span class="line"># 需要https、stream指令（个人配置）</span><br><span class="line">./configure  --with-http_ssl_module --with-stream</span><br><span class="line"># 不需要使用https执行</span><br><span class="line">./configure </span><br></pre></td></tr></table></figure><ul><li>编译如果提示 <code>./configure: error: the HTTP rewrite module requires the PCRE library.</code>，就是第一步中的依赖没有完全安装完，执行<code>yum -y install pcre-devel</code>后重新编译</li></ul><h4 id="五、编译安装"><a href="#五、编译安装" class="headerlink" title="五、编译安装"></a>五、编译安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install </span><br></pre></td></tr></table></figure><p>补充查看编辑参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看编译参数</span><br><span class="line">./configure --help | more </span><br></pre></td></tr></table></figure><p>这时同级目录外多了个nginx目录</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930152935109.png" alt="image-20220930152935109"></p><h4 id="六、启动nginx"><a href="#六、启动nginx" class="headerlink" title="六、启动nginx"></a>六、启动nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd ../nginx/sbin</span><br><span class="line"># 默认配置文件启动</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"># 指定配置文件启动</span><br><span class="line">./nginx -c  /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 停止命令</span><br><span class="line">./nginx -s stop</span><br><span class="line"># 重启命令</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>打开浏览器访问主站，可以看到</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930153217181.png" alt="image-20220930153217181"></p><h4 id="七、开机自动启动nginx"><a href="#七、开机自动启动nginx" class="headerlink" title="七、开机自动启动nginx"></a>七、开机自动启动nginx</h4><p>编辑文件<code>/etc/rc.d/rc.local</code>在后面添加内容</p><blockquote><p>在Linux系统中我们有可能需要某些命令在系统启动的时候自动运行，便可利用文件：&#x2F;etc&#x2F;rc.d&#x2F;rc.local</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 需要用绝对路径</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>ll查看下rc.local文件，如果<code>不是绿色</code>表示没有执行权限，则执行指令<code>chmod +x /etc/rc.d/rc.local</code></p>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目工程化</title>
      <link href="/posts/62ceffa9.html"/>
      <url>/posts/62ceffa9.html</url>
      
        <content type="html"><![CDATA[<p>##1、安装eslint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint -D</span><br></pre></td></tr></table></figure><p>##2、初始化eslint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>初始化时交互界面，一路回车选择默认即可，即可在工程根目录生成一个 .eslintrc.js 的配置文件,再新建一个 .eslintignore 文件用来忽略某些文件不检查</p><p>##3、安装prettier</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier -D</span><br></pre></td></tr></table></figure><p>然后在根目录中新建 .prettierrc.js 和 .prettierignore 文件</p><p>##4、安装eslint-config-prettier 和 eslint-plugin-prettier</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-config-prettier -D</span><br><span class="line"></span><br><span class="line">npm install eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure><p>eslint-config-prettier ：关闭 <code>Eslint</code> 中与 <code>Prettier</code> 冲突的选项，只会关闭冲突的选项，不会启用<code>Prettier</code>的规则</p><p>eslint-plugin-prettier ：将 prettier 作为 ESLint 的规则来使用，相当于代码不符合 Prettier 的标准时，会报一个 ESLint 错误，同时也可以通过 eslint –fix 来进行格式化；这样就相当于将 Prettier 整合进了 ESLint 中</p><p>##5、配置 .eslintrc.js 和 .eslintignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  root: true, // 设置后会停止继续在父级目录寻找 .eslintrc 或 package.json文件</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true, // 浏览器环境中的全局变量</span><br><span class="line">    node: true, // Node.js 全局变量和 Node.js 作用域</span><br><span class="line">    es6: true, // 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    &#x27;plugin:vue/essential&#x27;, // essential代表配置类别，还有base, essential, strongly-recommended, recommended</span><br><span class="line">    &#x27;eslint:recommended&#x27;, // 启用一系列核心规则, eslint:all 启用当前安装的eslint版本中所有核心规则，不推荐使用</span><br><span class="line">    &#x27;plugin:prettier/recommended&#x27;,</span><br><span class="line">  ],</span><br><span class="line">  /**</span><br><span class="line">   * extends 属性值可以由以下组成：</span><br><span class="line">   * plugin:</span><br><span class="line">   * 包名 (省略了前缀eslint-plugin-，比如，vue)</span><br><span class="line">   * /</span><br><span class="line">   * 配置名称 (比如 recommended)</span><br><span class="line">   */</span><br><span class="line">  // plugins: [&quot;prettier&quot;], // 插件是一个 npm 包，通常输出规则。一些插件也可以输出一个或多个命名的 配置, plugins 属性值 可以省略包名的前缀 eslint-plugin-。</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: 12, // 默认设置为 3，5（默认）， 你可以使用 6、7、8、9 或 10 来指定你想要使用的 ECMAScript 版本。你也可以用使用年份命名的版本号指定为 2015（同 6），2016（同 7），或 2017（同 8）或 2018（同 9）或 2019 (same as 10)</span><br><span class="line">    sourceType: &#x27;module&#x27;, // 设置为 &quot;script&quot; (默认) 或 &quot;module&quot;（如果你的代码是 ECMAScript 模块)</span><br><span class="line">    parser: &#x27;babel-eslint&#x27;, // 解析器，ESLint 默认使用Espree作为其解析器 Babel-ESLint： 一个对Babel解析器的包装，使其能够与 ESLint 兼容</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 当访问当前源文件内未定义的变量时，no-undef 规则将发出警告。如果你想在一个源文件里使用全局变量，推荐你在 ESLint 中定义这些全局变量，这样 ESLint 就不会发出警告了</span><br><span class="line">   * 对于每个全局变量键，将对应的值设置为 &quot;writable&quot; 以允许重写变量，或 &quot;readonly&quot; 不允许重写变量</span><br><span class="line">   */</span><br><span class="line">  globals: &#123;</span><br><span class="line">    var1: &#x27;writable&#x27;,</span><br><span class="line">    var2: &#x27;readonly&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：</span><br><span class="line">   * &quot;off&quot; 或 0 - 关闭规则</span><br><span class="line">   * &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</span><br><span class="line">   * &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span><br><span class="line">   */</span><br><span class="line">  rules: &#123;</span><br><span class="line">    // &#x27;prettier/prettier&#x27;: &#x27;off&#x27;,</span><br><span class="line">    &#x27;no-console&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class="line">    &#x27;no-debugger&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;warn&#x27; : &#x27;off&#x27;,</span><br><span class="line">    &#x27;linebreak-style&#x27;: [&#x27;error&#x27;, &#x27;windows&#x27;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * ESLint 支持几种格式的配置文件：</span><br><span class="line"> *</span><br><span class="line"> * JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。</span><br><span class="line"> * YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</span><br><span class="line"> * JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</span><br><span class="line"> * (弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。</span><br><span class="line"> * package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。</span><br><span class="line"> * 如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：</span><br><span class="line"> *</span><br><span class="line"> * .eslintrc.js</span><br><span class="line"> * .eslintrc.yaml</span><br><span class="line"> * .eslintrc.yml</span><br><span class="line"> * .eslintrc.json</span><br><span class="line"> * .eslintrc</span><br><span class="line"> * package.json</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/public/</span><br><span class="line">/dist/</span><br></pre></td></tr></table></figure><p>##6、配置 .prettierrc.js 和 .prettierignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //每行最多多少个字符换行默认80</span><br><span class="line">  printWidth: 100,</span><br><span class="line">  //tab缩进大小,默认为2</span><br><span class="line">  tabWidth: 2,</span><br><span class="line">  // 使用制表符或是空格缩进行, 默认 false。</span><br><span class="line">  useTabs: false,</span><br><span class="line">  // 句尾是否使用分号, 默认true</span><br><span class="line">  semi: false,</span><br><span class="line">  //使用单引号, 默认false(在jsx中配置无效, jsx使用 jsxSingleQuote, 默认都是双引号)</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  // 更改对象属性引号的的时机</span><br><span class="line">  // &quot;as-needed&quot; -仅在需要时在对象属性周围添加引号， 默认值。</span><br><span class="line">  // &quot;consistent&quot; -如果对象中至少有一个属性需要用引号引起来，请用所有属性引起来。</span><br><span class="line">  // &quot;preserve&quot; -尊重对象属性中引号的输入使用。</span><br><span class="line">  quoteProps: &#x27;as-needed&#x27;,</span><br><span class="line">  // 在 JSX 中使用单引号而不是双引号</span><br><span class="line">  jsxSingleQuote: true,</span><br><span class="line">  // 行尾逗号,默认es5,可选 none|es5|all</span><br><span class="line">  // &quot;es5&quot; -在ES5中有效的结尾逗号（对象，数组等）,默认值</span><br><span class="line">  // &quot;none&quot; -没有尾随逗号。</span><br><span class="line">  // &quot;all&quot;-尽可能在结尾加上逗号（包括函数参数）。这需要节点8或转换</span><br><span class="line">  trailingComma: &#x27;es5&#x27;,</span><br><span class="line">  // 对象中文字与大括号的空格 默认true</span><br><span class="line">  // true: &#123; foo: bar &#125;</span><br><span class="line">  // false: &#123;foo: bar&#125;</span><br><span class="line">  bracketSpacing: true,</span><br><span class="line">  // 箭头函数参数括号 默认always 可选 avoid| always</span><br><span class="line">  // avoid 能省略括号的时候就省略 例如x =&gt; x</span><br><span class="line">  // always 总是有括号 （x) =&gt; x</span><br><span class="line">  arrowParens: &#x27;always&#x27;,</span><br><span class="line">  // 仅格式化文件顶部包含特殊注释（称为杂注）的文件，默认 false</span><br><span class="line">  requirePragma: false,</span><br><span class="line">  // 是否在文件头部插入一个特殊的@format标记，默认 false</span><br><span class="line">  insertPragma: false,</span><br><span class="line">  // 行结尾的风格&lt;auto | lf | crlf | cr&gt;</span><br><span class="line">  //&quot;lf&quot;- 仅换行（），在Linux和macOS以及git存储库中很常见\n</span><br><span class="line">  //&quot;crlf&quot;- 回车符 + 换行符 （），在 Windows 上很常见\r\n</span><br><span class="line">  //&quot;cr&quot;- 仅回车符（），很少使用\r</span><br><span class="line">  //&quot;auto&quot;- 维护现有的行尾 （一个文件中的混合值通过查看第一行后使用的内容进行规范化）</span><br><span class="line">  endOfLine: &#x27;auto&#x27;,</span><br><span class="line">  // HTML空格敏感性</span><br><span class="line">  // &quot;css&quot;-遵守CSS display属性的默认值。</span><br><span class="line">  // &quot;strict&quot; -空白被认为是敏感的。</span><br><span class="line">  // &quot;ignore&quot; -空白被认为是不敏感的。 此配置项可修复 .vue 文件模板中包裹文字时候结束标签的结尾尖括号掉到了下一行</span><br><span class="line">  htmlWhitespaceSensitivity: &#x27;ignore&#x27;,</span><br><span class="line">  // Vue文件脚本和样式标签缩进</span><br><span class="line">  // &quot;false&quot; -不要缩进Vue文件中的脚本和样式标签。</span><br><span class="line">  // &quot;true&quot; -在Vue文件中缩进脚本和样式标签。</span><br><span class="line">  vueIndentScriptAndStyle: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/public/</span><br><span class="line">/dist/</span><br></pre></td></tr></table></figure><p>###6-1、安装webpack插件，能够在编译阶段自动检测和修复相关eslint错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>在vue.config.js中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const EslintPlugin = require(&#x27;eslint-webpack-plugin&#x27;)</span><br><span class="line">...</span><br><span class="line">module.exports = defineConfig(&#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      new EslintPlugin(&#123;</span><br><span class="line">        files: [&#x27;**/*.&#123;html,vue,js&#125;&#x27;], // 按需配置</span><br><span class="line">        fix: true,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>##7、安装stylelint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylelint stylelint-config-standard stylelint-prettier stylelint-config-prettier stylelint-scss postcss postcss-scss stylelint-config-standard-scss stylelint-config-recommended-vue stylelint-order stylelint-config-recess-order -D</span><br></pre></td></tr></table></figure><p>然后在根目录中新建 .stylelintrc.js 和 .stylelintignore 文件</p><ul><li><p>Stylelint: 样式代码检查工具，帮助避免错误并在样式中强制执行约定</p></li><li><p>stylelint-config-standard:   styelint的标准可共享配置</p></li><li><p>stylelint-prettier: 将 prettier 作为styleLint 的规则来使用</p></li><li><p>stylelint-config-prettier</p></li><li><p>stylelint-scss: 对scss支持</p></li><li><p>postcss —- 用于postcss-html和postcss-scss的支持</p></li><li><p>postcss-scss —- 解析<code>&lt;style lang=“scss”&gt;</code>下的scss样式</p></li><li><p>postcss-html —- 解析<code>&lt;style&gt;</code>类 vue、html 文件标签中的样式</p></li><li><p>stylelint-config-standard-scss —- 针对scss的标准可共享配置</p></li><li><p>stylelint-config-recommended-vue:  Vue projects的规则集</p></li><li><p>stylelint-order 对css属性进行排序的插件工具</p></li><li><p>stylelint-config-recess-order: 社区提供的属性排序的规则集</p></li></ul><p>##8、配置 .stylelintrc.js 和 .stylelintignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  root: true,</span><br><span class="line">  extends: [</span><br><span class="line">    &#x27;stylelint-config-standard&#x27;,</span><br><span class="line">    &#x27;stylelint-config-standard-scss&#x27;,</span><br><span class="line">    &#x27;stylelint-config-recess-order&#x27;,</span><br><span class="line">    &#x27;stylelint-config-recommended-vue&#x27;,</span><br><span class="line">    &#x27;stylelint-prettier/recommended&#x27;,</span><br><span class="line">    &#x27;stylelint-config-prettier&#x27;,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [&#x27;stylelint-prettier&#x27;, &#x27;stylelint-order&#x27;, &#x27;stylelint-scss&#x27;],</span><br><span class="line">  overrides: [</span><br><span class="line">    &#123;</span><br><span class="line">      files: [&#x27;**/*.&#123;html,vue&#125;&#x27;],</span><br><span class="line">      customSyntax: &#x27;postcss-html&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      files: [&#x27;**/*.scss&#x27;],</span><br><span class="line">      customSyntax: &#x27;postcss-scss&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &#x27;prettier/prettier&#x27;: true,</span><br><span class="line">    &#x27;selector-class-pattern&#x27;: null, // 关于饿了么类似el-table--border 这样的类，会进行报错，可以添加下面这条自定义规则</span><br><span class="line">    &#x27;no-invalid-double-slash-comments&#x27;: null, // 关闭‘不允许双斜杠注释’</span><br><span class="line">    &#x27;no-descending-specificity&#x27;: null, // 关闭‘不允许选择器之后覆盖选择器的低特异性更高的特异性’</span><br><span class="line">    &#x27;rule-empty-line-before&#x27;: &#x27;never&#x27;, // 关闭‘每个样式规则前后都有空行’</span><br><span class="line">    &#x27;comment-empty-line-before&#x27;: [</span><br><span class="line">      &quot;never&quot;,</span><br><span class="line">      &#123; except: [&quot;first-nested&quot;] &#125;</span><br><span class="line">    ], // 关闭‘注释之前必须有空行’</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/public/</span><br><span class="line">/dist/</span><br></pre></td></tr></table></figure><p>##9、安装webpack插件，能够在编译阶段自动检测和修复相关stylelint错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylelint-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>##10、安装项目对类css语法的支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader node-sass -D</span><br></pre></td></tr></table></figure><p>将该插件添加到webpack配置中</p><p>在vue.config.js中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const StylelintPlugin = require(&#x27;stylelint-webpack-plugin&#x27;)</span><br><span class="line">...</span><br><span class="line">module.exports = defineConfig(&#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      new StylelintPlugin(&#123;</span><br><span class="line">        files: [&#x27;**/*.&#123;html,vue,css,sass,scss&#125;&#x27;], // 按需配置</span><br><span class="line">        fix: true,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>##11 、安装husky和lint-staged</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky lint-staged -D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router 基础学习</title>
      <link href="/posts/6cd573ec.html"/>
      <url>/posts/6cd573ec.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://router.vuejs.org/zh/">Vue Router | Vue.js 的官方路由</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ol><li><p>新建路由实例并配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;</span><br><span class="line">// 定义一些路由 每个路由都需要映射到一个组件</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;default&#x27;,</span><br><span class="line">    redirect: &#x27;/login&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    name: &#x27;login&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      name: &#x27;登录&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: () =&gt; import(&#x27;@views/login.vue&#x27;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/index/:id&#x27;,</span><br><span class="line">    name: &#x27;index&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      name: &#x27;主页&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: () =&gt; import(&#x27;@/views/index.vue&#x27;),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line">// 创建路由实例并传递 `routes` 配置</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes //`routes: routes` 的缩写</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></li><li><p>创建并挂载到根实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const app = Vue.createApp(&#123;&#125;)</span><br><span class="line">//整个应用支持路由。</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>路由中设置一个或多个路径参数，路径参数 用冒号 <code>:</code> 表示。当一个路由被匹配时，它的 <em>params</em> 的值将在每个组件中以 <code>this.$route.params</code> 的形式暴露出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;/index/:id&#x27;,</span><br><span class="line">    name: &#x27;index&#x27;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      name: &#x27;主页&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: () =&gt; import(&#x27;@/views/index.vue&#x27;),</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>同一路由设置多个路径参数的匹配规则</p><table><thead><tr><th align="left">匹配模式</th><th align="left">匹配路径</th><th align="left">$route.params</th></tr></thead><tbody><tr><td align="left">&#x2F;users&#x2F;:username</td><td align="left">&#x2F;users&#x2F;eduardo</td><td align="left"><code>&#123; username: &#39;eduardo&#39; &#125;</code></td></tr><tr><td align="left">&#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId</td><td align="left">&#x2F;users&#x2F;eduardo&#x2F;posts&#x2F;123</td><td align="left"><code>&#123; username: &#39;eduardo&#39;, postId: &#39;123&#39; &#125;</code></td></tr></tbody></table><blockquote><p>路由里配置了路径参数，但是访问时没带上时，会找不到路由</p></blockquote><p>带参的路由使用时，用户从<code>/index/1</code> 导航到 <code>/index/2</code> 时，<strong>相同的组件实例将被重复使用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会被调用</strong></p><p>要对同一个组件中参数的变化做出响应的话，你可以简单地 watch <code>$route</code> 对象上的任意属性，在这个场景中，就是 <code>$route.params</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   &#x27;$route.params&#x27;: &#123;</span><br><span class="line">     handler(v) &#123;</span><br><span class="line">       console.log(&#x27;路由参数更新：&#x27; ,v)</span><br><span class="line">       console.log(&#x27;重新去获取该路由的数据&#x27;)</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>或者，使用 <code>beforeRouteUpdate</code> <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫</a>，它也可以取消导航：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const User = &#123;</span><br><span class="line">  template: &#x27;...&#x27;,</span><br><span class="line">  async beforeRouteUpdate(to, from) &#123;</span><br><span class="line">    // 对路由变化做出响应...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由匹配语法"><a href="#路由匹配语法" class="headerlink" title="路由匹配语法"></a>路由匹配语法</h3><p>路由的path中可以自定义正则来匹配</p><p>如果需要一个参数匹配多个部分路由，</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个vue3项目</title>
      <link href="/posts/a9b9e89c.html"/>
      <url>/posts/a9b9e89c.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>可以利用<code>vue ui</code>命令或者webstorm创建一个vue3项目</p><blockquote><p>用<code>vue ui</code>可视化界面创建项目前，node下应该全局安装了vue构建工具的脚手架vue cli</p><p>安装命令为：<code>npm install @vue/cli -g</code>，此命令会下载最新的vue3的脚手架。如果创建的是vue2的项目，安装命令应该是<code> npm install vue-cli -g</code>，不出意外会给你安装最新版本的脚手架，也就是2.9.6版本的。安装完成后用<code>vue -V</code>命令查看安装的脚手架版本即可。脚手架的版本很大程度决定了整个工程的配置文件应该怎么配，一般都可以去官网上找找跟以往的不同配置点在哪。</p></blockquote><p>可视化界面中可以预选如下配置：</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/202204171142604.png" alt="image-20220417114242540"></p><h3 id="2-安装配置依赖"><a href="#2-安装配置依赖" class="headerlink" title="2.安装配置依赖"></a>2.安装配置依赖</h3><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next -S</span><br></pre></td></tr></table></figure><blockquote><p>@next是npm包的一个tag，除此之外还有@beta，@latest等，可以参考博客<a href="https://www.jianshu.com/p/c45f4eca98de">npm包tag的使用，以及@beta和@next的含义 - 简书 </a>，@符号后面还可以直接跟版本号</p></blockquote><p>2.配置</p><p>在main.js中增加以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">createApp(App).use(store)</span><br></pre></td></tr></table></figure><p>在src 文件夹下新建文件夹及文件store&#x2F;index.js，index.js中新增以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default createStore(&#123;</span><br><span class="line">  // state参数，数据仓库，用来存储数据的</span><br><span class="line">  state: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 获取数据的，有点像computed的用法</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 更改state数据的方法都要卸载mutations里</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 异步，异步的方法都写在这里，但最后还是需要通过mutations来修改state的数据</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 分包。Vuex将store分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router -S</span><br></pre></td></tr></table></figure><p>2.配置</p><p>在main.js中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">createApp(App).use(router)</span><br></pre></td></tr></table></figure><p>在src 文件夹下新建文件夹及文件router&#x2F;index.js，在index.js中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const routes = []</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br><span class="line"></span><br><span class="line">// 哈希模式如下</span><br><span class="line"></span><br><span class="line">import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const routes = []</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><blockquote><p>axios是一个库，并不是vue中的第三方插件，使用时不能通过Vue.use()安装插件，需要<strong>在原型上进行挂载绑定</strong></p></blockquote><p>文档：<a href="https://www.kancloud.cn/yunye/axios/234845">使用说明 · Axios 中文说明 · 看云 (kancloud.cn)</a></p><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br><span class="line">npm install vue-axios -S</span><br></pre></td></tr></table></figure><p>2.配置</p><p>vue3: 在main.js中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line">createApp(App).use(VueAxios,axios).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h4 id="element-plus"><a href="#element-plus" class="headerlink" title="element-plus"></a>element-plus</h4><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus -S</span><br></pre></td></tr></table></figure><blockquote><p>注意vue3后不应该再使用element-ui了，应该使用官方为vue3开发的element-plus</p></blockquote><p>2.配置</p><p>在main.js中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line">createApp(App).use(ElementPlus)</span><br></pre></td></tr></table></figure><h4 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h4><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass sass-loader -D</span><br></pre></td></tr></table></figure><h4 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h4><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-项目配置"><a href="#3-项目配置" class="headerlink" title="3.项目配置"></a>3.项目配置</h3><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">const &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)</span><br><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">const resolve = (dir) =&gt; path.join(__dirname, dir)</span><br><span class="line">module.exports = defineConfig(&#123;</span><br><span class="line">// url基本路径，如果配置为/a，则需要访问http://localhost:8081/a</span><br><span class="line">  publicPath: &quot;&quot;,</span><br><span class="line">  // 包文件输出路径，即打包到哪里</span><br><span class="line">  outputDir: &quot;dist&quot;,</span><br><span class="line">  // 静态资源地址</span><br><span class="line">  assetsDir: &#x27;public&#x27;,</span><br><span class="line">  // eslint-loader 是否在保存的时候检查</span><br><span class="line">  lintOnSave: false,</span><br><span class="line">  // 生产环境是否生成 sourceMap 文件</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  //</span><br><span class="line">  // runtimeCompiler: true,</span><br><span class="line">  //文件hash</span><br><span class="line">  filenameHashing: true,</span><br><span class="line">  // 调整内部的 webpack 配置。</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    // 配置文件夹别名，template和style里引入的时候前面需要加~，script不需要</span><br><span class="line">    config.resolve.alias</span><br><span class="line">        .set(&quot;@&quot;, resolve(&quot;src&quot;))</span><br><span class="line">        .set(&quot;@assets&quot;, resolve(&quot;src/assets&quot;))</span><br><span class="line">        .set(&quot;@components&quot;, resolve(&quot;src/components&quot;))</span><br><span class="line">        .set(&quot;@router&quot;, resolve(&quot;src/router&quot;))</span><br><span class="line">        .set(&quot;@store&quot;, resolve(&quot;src/store&quot;))</span><br><span class="line">        .set(&quot;@views&quot;, resolve(&quot;src/views&quot;))</span><br><span class="line">        .set(&quot;@public&quot;, resolve(&quot;public&quot;))</span><br><span class="line">  &#125;,</span><br><span class="line">  // css相关配置</span><br><span class="line">  css: &#123;</span><br><span class="line">    // css预设器配置项</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      sass: &#123;</span><br><span class="line">        additionalData: `@import &#x27;./src/assets/style/variables.scss&#x27;;`,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: 8081,</span><br><span class="line">    https:false,</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    // hot: &#x27;only&#x27;,</span><br><span class="line">    // useLocalIp: true, // 可以使用localhost和127.0.0.1</span><br><span class="line">    // disableHostCheck: true,  // 绕过主机检查</span><br><span class="line">    compress: true, // 浏览器请求静态资源时压缩一下，打开浏览器的检查时可以看到bundle.js的content-encoding是gzip，浏览器自动解压</span><br><span class="line">    client: &#123;</span><br><span class="line">      webSocketURL: &#x27;ws://0.0.0.0:8081/ws&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">    &#125;,  // 在所有响应中添加首部内容</span><br><span class="line">  &#125;,</span><br><span class="line">  transpileDependencies: true</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h4><h4 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 入门</title>
      <link href="/posts/872aeaa.html"/>
      <url>/posts/872aeaa.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、node-js-简介"><a href="#1、node-js-简介" class="headerlink" title="1、node.js 简介"></a>1、node.js 简介</h2><p>node.js 借鉴了谷歌浏览器的v8引擎，使JavaScript语言能够更加高效的处理并发，异步等影响性能的问题，最大的特点是：单线程、非阻塞、异步IO、事件驱动。通过这些技巧解决I&#x2F;O耗时长，多线程程序设计复杂等问题。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零到一开发一个项目</title>
      <link href="/posts/d3482257.html"/>
      <url>/posts/d3482257.html</url>
      
        <content type="html"><![CDATA[<h5 id="一、立项"><a href="#一、立项" class="headerlink" title="一、立项"></a>一、立项</h5><p>1、项目介绍？</p><p>2、为什么想做？这个项目能解决什么问题？有什么实际意义？或者现有的产品有哪些不足或痛点？</p><p>3、这个项目的核心亮点在哪里？</p><p>4、项目取名（中英文）</p><h5 id="二、调研"><a href="#二、调研" class="headerlink" title="二、调研"></a>二、调研</h5><p>客观分析确认想做的项目的意义：</p><p>1、竞品分析：市场上有没有类似的项目？自己的项目和他们比有哪些异同（优缺点）</p><p>2、用户调研：问一问别人的想法</p><h5 id="三、需求分析"><a href="#三、需求分析" class="headerlink" title="三、需求分析"></a>三、需求分析</h5><p>1、项目有哪些功能？</p><p>2、给功能划分优先级（P0-P4），区分哪些功能是必须要做的？哪些功能是可有可无不着急的？</p><p>3、简单评估每个功能是否可以实现？要花多久实现？</p><h5 id="四、带领团队"><a href="#四、带领团队" class="headerlink" title="四、带领团队"></a>四、带领团队</h5><p>1、沟通协作方式（交流群、腾讯会议、钉钉等）</p><p>2、团队文档沉淀方式（羽雀知识、腾讯文档）</p><p>3、确认代码协作方式（GitHub或GitLab私仓）</p><p>4、确认分工和对接方式（比如前后端用接口文档对接）</p><h5 id="五、技术选型"><a href="#五、技术选型" class="headerlink" title="五、技术选型"></a>五、技术选型</h5><p>1、前端用什么？</p><p>2、后端用什么？</p><p>3、用什么上线？</p><p><strong>先把要用的库整合进来，跑起Demo</strong></p><p>输出项目实现方案文档</p><h5 id="六、资源准备"><a href="#六、资源准备" class="headerlink" title="六、资源准备"></a>六、资源准备</h5><h5 id="七、系统设计"><a href="#七、系统设计" class="headerlink" title="七、系统设计"></a>七、系统设计</h5><ul><li>功能模块图</li><li>技术架构图</li><li>库表设计</li><li>每个功能实现逻辑</li></ul><p>输出项目整体实现方案，项目功能实现方案文档</p><h5 id="八、开发规范"><a href="#八、开发规范" class="headerlink" title="八、开发规范"></a>八、开发规范</h5><p>编码规范</p><p>隐私保护</p><h5 id="九、需求排期"><a href="#九、需求排期" class="headerlink" title="九、需求排期"></a>九、需求排期</h5><p>确认每个需求大致完成时间</p><p>输出需求信息表格</p><h5 id="十、基本操作开发"><a href="#十、基本操作开发" class="headerlink" title="十、基本操作开发"></a>十、基本操作开发</h5>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex使用入门</title>
      <link href="/posts/99b22b69.html"/>
      <url>/posts/99b22b69.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://vuex.vuejs.org/zh/">vuex4官方文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next -S //vuex3不需要加@next</span><br><span class="line">或</span><br><span class="line">yarn add vuex@next -S</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ol><li><p>创建一个store仓库</p><blockquote><p>store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同:</p><p>1.Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>2.你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 创建一个新的 store 示例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line"><span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">count :<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">increment (state) &#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123; <span class="comment">/*根组件*/</span> &#125;)</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br></pre></td></tr></table></figure><p>在 vue 组件中，通过 <code>this.$store</code> 访问store实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>访问state的几种方式</p><p>1.<code>this.$store.state.属性名</code> 或 <code>this.$store.state.模块名.属性名</code></p><p>2.通过辅助函数mapState</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.导入辅助函数</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">2.在 computed 里引入</span><br><span class="line">...mapState(&#123;属性名:state=&gt;state.属性名&#125;)</span><br><span class="line">或</span><br><span class="line">...mapState([&#x27;属性名1&#x27;,&#x27;属性名2&#x27;])</span><br><span class="line">或</span><br><span class="line">...mapState(&#x27;模块命名空间名&#x27;,[&#x27;属性名1&#x27;,&#x27;属性名2&#x27;])</span><br></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：“getter” 可以认为是 store 的计算属性</p><p>在 store&#x2F;index.js 中定义</p><p>通过属性访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">// Getter 接受 state 作为其第一个参数</span><br><span class="line">    doneTodos: (state) =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;,</span><br><span class="line">    // Getter 也可以接受其他 getter 作为第二个参数</span><br><span class="line">    doneTodosCount (state, getters) &#123;</span><br><span class="line">      return getters.doneTodos.length</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过方法访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    getTodoById: (state) =&gt; (id) =&gt; &#123;</span><br><span class="line">      return state.todos.find(item =&gt; item.id === id)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用getters的几种方式</p><p>1.<code>this.$store.getters.属性名 </code>或 <code>this.$store.getters[&#39;模块名/属性名&#39;]</code></p><p>2.使用辅助函数mapGetter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.导入辅助函数</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">2.在 computed 里引入</span><br><span class="line">...mapGetters([&#x27;属性名1&#x27;,&#x27;属性名2&#x27;])</span><br><span class="line">或</span><br><span class="line">...mapGetters(&#x27;模块命名空间名&#x27;,[&#x27;属性名1&#x27;,&#x27;属性名2&#x27;])</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的**事件类型 (type)和一个回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><p>你不能直接调用一个 mutation 处理函数。这个选项更像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”要唤醒一个 mutation 处理函数，你需要以相应的 type 调用 <strong>store.commit</strong> 方法</p><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的<strong>载荷（payload）</strong>,在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params">state,payload</span>) &#123;</span><br><span class="line">        state.<span class="property">count</span> = payload.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Mutation 必须是同步函数</p></blockquote><p>使用mutations的几种方式</p><p>1.直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&#x27;事件名&#x27;, 提交载荷)</span><br><span class="line">或</span><br><span class="line">this.$store.commit(&#x27;模块名/事件名&#x27;, 提交载荷)</span><br></pre></td></tr></table></figure><p>2.使用type</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&#123;</span><br><span class="line">  type: &#x27;事件名&#x27;,</span><br><span class="line">  提交载荷</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.使用辅助函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.导入辅助函数</span><br><span class="line">import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">2.在 methods 里引入</span><br><span class="line">...mapMutations([&#x27;事件名1&#x27;,&#x27;事件名2&#x27;])</span><br><span class="line">或</span><br><span class="line">...mapMutations(&#x27;模块名&#x27;,[&#x27;事件名&#x27;])</span><br><span class="line">3.使用：this.事件名(提交载荷)</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context,payload) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    或者</span><br><span class="line">    increment (&#123; commit,state &#125;,payload) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用方式：</p><p>1.分发Action</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&#x27;事件名&#x27;, 提交载荷)</span><br><span class="line">或</span><br><span class="line">this.$store.dispatch(&#x27;模块名/事件名&#x27;, 提交载荷)</span><br></pre></td></tr></table></figure><p>2.使用辅助函数mapActions</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.导入辅助函数</span><br><span class="line">import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line">2.在 methods 里引入</span><br><span class="line">...mapActions([&#x27;事件名1&#x27;,&#x27;事件名2&#x27;])</span><br><span class="line">或</span><br><span class="line">...mapActions(&#x27;模块名&#x27;,[&#x27;事件名&#x27;])</span><br><span class="line">3.使用：this.事件名(提交载荷)</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 导入子模块</span><br><span class="line">import area from &#x27;./module/area.js&#x27;</span><br><span class="line">// createStore 对象里加上modules</span><br><span class="line">modules: &#123;</span><br><span class="line">    area,</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">// 子模块导出</span><br><span class="line">export default &#123;</span><br><span class="line">    namespaced:true,</span><br><span class="line">    state() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习</title>
      <link href="/posts/4d8045a.html"/>
      <url>/posts/4d8045a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h2><p>(1) 值类型：String(字符串)，Number(数值)，Boolean(布尔值)，Undefined，Null</p><p>(2) 引用类型：Array(数组)，Object(对象)，Function(函数)</p><p><strong>区别</strong></p><p><strong>1.存储位置不一样</strong></p><p>① 值类型的变量会保存在栈内存中，如果在一个函数中声明一个值类型的变量，那么这个变量当函数执行结束之后会自动销毁</p><p>② 引用类型的变量名会保存在栈内存中，但是变量值会存储在堆内存中，引用类型的变量不会自动销毁，当没有引用变量引用它时，系统的垃圾回收机制会回收它</p><p><strong>2.复制方式不一样</strong></p><p>① 值类型的变量直接赋值就是深复制，如 var a &#x3D; 10; var b &#x3D; a;那么a的值就复制给b了，b修改值不会影响a</p><p>② 引用类型的变量直接赋值实际上是传递引用，只是浅复制</p><p><strong>3.数据比较不一样</strong></p><p>① 值类型的比较是值的比较，只有当它们的值相等的时候它们才相等。比较的时候注意”&#x3D;&#x3D;”和”&#x3D;&#x3D;&#x3D;”，双等号（&#x3D;&#x3D;）在做比较的时候做了类型转换，而全等号（&#x3D;&#x3D;&#x3D;）是值和类型相等是才能相等</p><p>② 引用类型的比较是引用地址的比较</p><blockquote><p><code>typeof</code> 运算符可以获取值类型的变量类型，但获取引用类型的变量类型时，会返回Object，这个时候<code>instanceof</code> 运算符就出场了，<code>[] instanceof Array</code> 会返回true</p></blockquote><h2 id="2-JavaScript-内置对象"><a href="#2-JavaScript-内置对象" class="headerlink" title="2.JavaScript 内置对象"></a>2.JavaScript 内置对象</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PowerShell 优化</title>
      <link href="/posts/eb0f33c6.html"/>
      <url>/posts/eb0f33c6.html</url>
      
        <content type="html"><![CDATA[<h5 id="1-安装-oh-my-posh"><a href="#1-安装-oh-my-posh" class="headerlink" title="1. 安装 oh-my-posh"></a>1. 安装 <em>oh-my-posh</em></h5><p><a href="https://ohmyposh.dev/">Oh My Posh 官网</a></p><p><strong>修改git中文文件名乱码：</strong></p><p>乱码前<img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220418115841397.png" alt="image-20220418115841397"></p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><p>解决后</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220418115938594.png" alt="image-20220418115938594"></p><h5 id="2-安装-PSReadLine"><a href="#2-安装-PSReadLine" class="headerlink" title="2.安装 PSReadLine"></a>2.安装 <em>PSReadLine</em></h5><p>PSReadLine能够记录历史输入的命令，当下次输入命令时能够自动补全和提示</p><p>安装最新版本<code>PSReadLine</code>，在power shell中执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine  -Force</span><br></pre></td></tr></table></figure><p>再修改配置文件，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $profile</span><br></pre></td></tr></table></figure><p>系统会自动弹出这个配置文件让你编辑</p><p>接着在这个文件中添加两行</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module PSReadLine</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/QQ%E6%88%AA%E5%9B%BE20220404162700.png" alt="QQ截图20220404162700"></p><h5 id="3-修改默认背景图片"><a href="#3-修改默认背景图片" class="headerlink" title="3.修改默认背景图片"></a>3.修改默认背景图片</h5><p>打开power shell 的设置，选择打开JSON 文件</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403163222810.png" alt="image-20220403163222810"></p><p>编辑json 文件，输入下面图片路径就行，透明度随自己调</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403163416797.png" alt="image-20220403163416797"></p><p>我的图片是下面这个，想用的话可以直接右键保存</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/black-desk.webp" alt="black-desk"></p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/white-desk.webp" alt="white-desk"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个vue2项目</title>
      <link href="/posts/fcee328.html"/>
      <url>/posts/fcee328.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h2><p>webstorm创建一个vue3项目</p><h2 id="2-安装配置依赖"><a href="#2-安装配置依赖" class="headerlink" title="2. 安装配置依赖"></a>2. <strong>安装配置依赖</strong></h2><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>1.src 文件夹下新建文件夹及文件store&#x2F;index.js，index.js新增以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">export default new Vuex.Store(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>2.main.js中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">store,</span><br><span class="line">render:h =&gt; h(APP)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>在src 文件夹下新建文件夹及文件router&#x2F;index.js，在index.js中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">const routes = []</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode:&quot;history&quot;,</span><br><span class="line">  base:&#x27;process.env.BASE_URL&#x27;,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote><p>axios是一个库，并不是vue中的第三方插件，使用时不能通过Vue.use()安装插件，需要<strong>在原型上进行挂载绑定</strong></p></blockquote><p>文档：<a href="https://www.kancloud.cn/yunye/axios/234845">使用说明 · Axios 中文说明 · 看云 (kancloud.cn)</a></p><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br><span class="line">npm install vue-axios -S</span><br></pre></td></tr></table></figure><p>2.配置</p><p>在main.js中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import axios from ‘axios’</span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.get(url).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure><p>2.配置</p><p>在main.js中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><h2 id="3-项目配置"><a href="#3-项目配置" class="headerlink" title="3. 项目配置"></a>3. 项目配置</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS常用命令总结</title>
      <link href="/posts/b270440a.html"/>
      <url>/posts/b270440a.html</url>
      
        <content type="html"><![CDATA[<ul><li><code>md/mkdir 文件夹名</code> ：创建文件夹</li><li><code>rd/rmdir 文件夹名</code>：删除文件夹（只能删除空的，递归删除所有的研究中）</li><li><code>cd . &gt; 1.txt</code> ：创建1.txt空文件</li><li><code>echo 123 &gt; 1.txt</code>：创建1.txt并写入内容123</li><li><code>del 1.txt</code> ：删除1.txt文件</li><li><code>dir</code>：列出当前目录下所有文件及文件夹</li><li><code>ls</code>：列出当前目录下所有文件及文件夹</li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作指南</title>
      <link href="/posts/2b274a74.html"/>
      <url>/posts/2b274a74.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git官方文档：<a href="http://git-scm.com/book/zh/v2">中文官方文档</a></p></blockquote><h5 id="1-远程仓库配置SSH-Key"><a href="#1-远程仓库配置SSH-Key" class="headerlink" title="1.远程仓库配置SSH Key"></a>1.远程仓库配置SSH Key</h5><p>Github上的远程仓库有两种使用方式，分别是HTTPS和SSH，区别是：</p><ul><li>HTTPS:零配置，可以输入密码直接克隆项目，需要输入Github的账号和密码才能push成功</li><li>SSH：需要进行额外的ssh key配置，配置完成后，才能克隆项目，访问仓库不需要输入Github的账号和密码</li></ul><blockquote><p>HTTPS认证方式虽然需要输入账户密码，但现在也不需要每次都输入。这个凭据保存需要依赖一个凭据管理器，每个操作系统平台都有自己的凭据管理器。</p><p>当我们在使用http协议push之后，账号和密码会自动保存至凭据管理器中（如果有的话），之后就不需要每次push的时候都输入了。</p><p>当保存了密码后又想要修改密码或者删除密码怎么办？</p><p>window上的git的密码是交给window进行管理的，我们可以进入‘控制面板’ - ‘用户账户’ - ‘凭证管理器’ - ‘Window凭据’-‘普通凭据’，找到git的配置，进行修改</p></blockquote><p>SSH Key的作用：实现本地仓库和Github间的加密数据传输，它由两部分组成，分别是：</p><ul><li>id_rsa（私钥文件，存放于客户端的电脑中即可)</li><li>id rsa.pub (公钥文件，需要配置到Github 中)</li></ul><p>生成SSH Key: 打开Git Bash,输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>执行命令 生成<code>ssh key</code></p><ul><li>-t &#x3D; The type of the key to generate 密钥的类型</li><li>-C &#x3D; comment to identify the key 用于识别这个密钥的注释（好像一般都填的邮箱）</li></ul><p>文件默认是在C盘用户目录下，我的是<code>C:\Users\用户名\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p><p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p><p><strong>测试验证：</strong></p><p>执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能会提示<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p><p>如果，看到：</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p></blockquote><p>恭喜你，你的设置已经成功了。</p><h5 id="2-本地仓库和远程仓库进行关联操作"><a href="#2-本地仓库和远程仓库进行关联操作" class="headerlink" title="2.本地仓库和远程仓库进行关联操作"></a>2.本地仓库和远程仓库进行关联操作</h5><ul><li>本地没有现成的Git仓库</li></ul><ol><li><p>使用终端命令创建README.MD文档，并写入初始内容“初始内容”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# 初始内容&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure></li><li><p>初始化本地Git仓库，并将文件的修改提交到本地的Git仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库和远程仓库进行关联，并把远程仓库命名为origin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:yzxcxya/xxx.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库中的内容推送到远程的origin仓库中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>本地有现成的Git仓库的话直接忽略上面前两步就行</p></li><li><p>最直接的方法就是直接在某个文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 你的仓库地址</span><br></pre></td></tr></table></figure><p>运行完后直接关联了</p></li></ul><h5 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h5><table><thead><tr><th align="center">分支操作</th><th align="center">本地仓库</th><th align="center">远程仓库</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">查看分支</td><td align="center"><code>git branch</code></td><td align="center"><code>git branch -r</code></td><td align="center"><code>git branch -a</code>查看本地和远程所有分支</td></tr><tr><td align="center">创建分支</td><td align="center"><code>git branch 分支名</code></td><td align="center">本地切换到新分支并push会自动创建</td><td align="center"></td></tr><tr><td align="center">切换分支</td><td align="center"><code>git checkout 分支名</code></td><td align="center"></td><td align="center"><code>git checkout -b 分支名</code>创建并切换分支</td></tr><tr><td align="center">删除分支</td><td align="center"><code>git branch -d  分支名</code></td><td align="center"><code>git push origin -d 分支名</code>或者 <code>git push origin :分支名</code></td><td align="center">删除远程分支时，远程默认分支不能是要删除的分支名；推送一个空分支到远程分支上相当于删除远程分支</td></tr><tr><td align="center">修改分支名</td><td align="center"><code>git branch -m 旧分支名 新分支名</code></td><td align="center">修改本地分支名后推送到远程库，再删除远程库旧分支</td><td align="center"></td></tr></tbody></table><p><em><strong>合并分支场景</strong></em>：将dev分支合入master分支：</p><ol><li>本地切换到dev分支，<code>git pull origin dev</code> 拉取远程仓库dev分支最新代码</li><li>再切换到master分支，先确保master分支也是最新代码，<code>git pull</code> 一下就行</li><li>执行<code>git merge dev</code>或者<code>git rebase dev</code> ,本地的master就把本地的dev分支合并了</li><li>最后<code>git push origin master</code>，把合并后的master提交到远程master分支</li></ol><h5 id="4-git常用命令"><a href="#4-git常用命令" class="headerlink" title="4.git常用命令"></a>4.git常用命令</h5><p><code>git status [-s]</code>：查看git文件状态</p><p><code>git commit [-a] -m message</code> : 提交文件到仓库，-a表示跳过暂存步骤（git add）,修改后直接提交</p><p><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> : 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建；如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master；如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支；如果当前分支只有一个远程分支，那么主机名都可以省略；</p><p><code>git push -u origin master</code> : 如果当前分支与多个主机存在追踪关系，则可以使用-u选项关联一个默认远程仓库，这样后面就可以不加任何参数使用git push。</p><p><code>git diff [&lt;path&gt;...]</code>：什么参数都不加，默认比较工作区与暂存区的差异（<code>git add</code>后就无差异了）</p><p><code>git diff --cached [&lt;path&gt;...]</code>：比较暂存区与最新本地版本库（<code>git commit</code>后就无差异了）</p><p><code>git diff HEAD [&lt;path&gt;...]</code>：比较工作区与最新本地版本库。如果HEAD指向的是master分支，那么HEAD还可以换成master</p><p><code>git diff branch1 branch2 --stat</code>   :显示出所有有差异的文件(不详细,没有对比内容)</p><p><code>git diff branch1 branch2</code>   : 显示出所有有差异的文件的详细差异(更详细)</p><p><code>git diff branch1 branch2 具体文件路径</code> : 显示指定文件的详细差异(对比内容)</p><p><code>git remote -v</code>：查看当前关联的远程仓库地址</p><p><code>git remote show origin</code>：查看remote地址，远程分支，还有本地分支与之对应的关系等信息</p><p><code>git remote remove origin</code> ：移除当前远程仓库的连接</p><p><code>git remote add origin 远程仓库地址</code>：和远程仓库地址建立连接</p><p><code>git reset</code>：撤销本地修改</p><p><code>git stash [&lt;save &#39;message&#39;&gt;]</code> : 把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录，当前的工作目录就干净了</p><p><code>git stash list</code>：查看现有stash</p><p><code>git stash pop [&lt;stash@&#123;0&#125;&gt;]</code>：重新应用缓存的stash，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash pop stash@{$num} ， 比如第二个：git stash popstash@{1} </p><p><code>git stash apply [&lt;stash@&#123;0&#125;&gt;]</code> :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} </p><p><code>git stash drop[&lt;stash@&#123;0&#125;&gt;]</code>：删除stash，不带参数默认最近的</p><p><code>git stash clear</code>：删除所有缓存的stash</p><p><code>git stash show [&lt;stash@&#123;0&#125;&gt;] [-p]</code>：查看最近stash的diff</p><p><code>git log -num --graph</code>: 查看git提交日志，num为显示几条，–graph是否用图形界面显示</p><p><code>git log --oneline</code>: 输出 简写commitid,提交说明</p><p><code>git log --pretty=format:&quot;%h - %an, %ad ,%s&quot; --graph</code>: 输出 简写commitid,作者名,提交日期,提交说明</p><blockquote><p>git log 更多用法可以看网上这篇文章：<a href="https://www.cnblogs.com/ay2021/p/15160893.html">git log 命令详解</a>，讲得特别特别详细</p></blockquote><h5 id="5-git冲突"><a href="#5-git冲突" class="headerlink" title="5.git冲突"></a>5.git冲突</h5><p>一般来说，两个人修改了同一个文件（不管是同一文件不同行还是同一行），你<code>git pull</code>时就会有冲突错误报出来，然后在你冲突的文件，寻找用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;隔开的两部分，HEAD是你的内容，另外一部分是repos的内容，然后手工修改保留你想要的部分，在<code>git add</code> 和<code>git commit</code>然后再<code>git push</code>上去就好了。</p><h5 id="6-git流程"><a href="#6-git流程" class="headerlink" title="6.git流程"></a>6.git流程</h5><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/git.jpg" alt="git"></p><h5 id="7-撤销修改"><a href="#7-撤销修改" class="headerlink" title="7.撤销修改"></a>7.撤销修改</h5><ul><li><p>未使用 git add 缓存代码时：</p><p>放弃某个文件修改（不要忘记中间“–”，不写就是建初分支了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filepathname</span><br></pre></td></tr></table></figure><p>放弃所有文件修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout . </span><br></pre></td></tr></table></figure><p>此命令用来放弃掉所有还没有加入到缓存区（就是 <code>git add</code> 命令）的修改：包括内容修改与文件删除。但是此命令不会删除掉新建的文件。因为刚新建的文件还没有加入到git的管理系统中，所以对于git是未知的，自己手动删除就可以了。</p></li><li><p>使用了 git add 缓存了代码（取消暂存文件）：</p><p>放弃某个文件的缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD filepathname</span><br></pre></td></tr></table></figure><p>放弃所有文件缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure><p>此命令用来清除 git 对于文件修改的缓存。相当于撤销 <code>git add</code> 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了 <code>git add</code> 前的状态。继续使用上面add前的操作，就可以放弃本地的修改。</p></li><li><p>已经用 git commit 提交了代码：</p><p>回退到上一次commit的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^    // HEAD^表示上一个版本，同HEAD~1, HEAD^^表示上上个版本,同HEAD~2</span><br></pre></td></tr></table></figure><p>向前回退到第三个版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~3 </span><br></pre></td></tr></table></figure><p>回退1.txt这个文件到上一版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^ 1.txt</span><br></pre></td></tr></table></figure><p>回退到任意版本（可以使用 git log命令来查看git的提交历史，commit 后面的一串字符就是commit ID）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commitId</span><br></pre></td></tr></table></figure><p>回退到和远程库一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset origin/master </span><br></pre></td></tr></table></figure></li><li><p>撤销远程提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset [--hard] 上个commitid</span><br><span class="line">git push -f  // 强制提交</span><br></pre></td></tr></table></figure></li><li><p>回退的几个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. git reset --mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息</span><br><span class="line">2. git reset --soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</span><br><span class="line">3. git reset --hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</span><br></pre></td></tr></table></figure></li><li><p>替换 commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交</span><br><span class="line">$ git commit -m &#x27;第一次提交&#x27;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit -m &#x27;代替第一次提交&#x27; --amend</span><br><span class="line">此时第一次提交信息就会被替换掉</span><br></pre></td></tr></table></figure></li></ul><h5 id="8-git放弃跟踪某些文件"><a href="#8-git放弃跟踪某些文件" class="headerlink" title="8.git放弃跟踪某些文件"></a>8.git放弃跟踪某些文件</h5><p>一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以在工程下新建<code>.gitignore</code>文件,并在其中添加要忽略的文件或目录，每行表示一个忽略规则，像下面一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target/</span><br><span class="line">*.iml</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure><p>.gitignore格式规范如下：</p><blockquote><ul><li>以#开头的是注释</li><li>以&#x2F;结尾的是目录</li><li>以&#x2F;开头防止递归,只作用当前目录</li><li>以!开头表示取反</li><li>星号* 匹配零个或多个任意字符</li><li>[abc] 匹配任何哟个列在方括号中的字符</li><li>问号 ？匹配一个字符</li><li>方括号中使用短划线分割两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</li><li>两个星号** 表示匹配任意中间目录，比如（a&#x2F;**&#x2F;z 可以匹配a&#x2F;z，a&#x2F;b&#x2F;z 或者 a&#x2F;b&#x2F;c&#x2F;z）</li></ul></blockquote><p><em><strong>.gitignore不生效？</strong></em></p><blockquote><p>.gitignore只能忽略原来没有被跟踪的文件，因此跟踪过的文件是无法被忽略的，解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m ‘xxx’</span><br></pre></td></tr></table></figure><h5 id="9-git分支与工作区、暂存区关系"><a href="#9-git分支与工作区、暂存区关系" class="headerlink" title="9.git分支与工作区、暂存区关系"></a>9.git分支与工作区、暂存区关系</h5><p>文件不管新增修改，在<code>git add</code> 前后在任何一个分支都是全局的，在工作区都可见，切换分支不会影响它。</p><p>文件在<code>git commit</code>后，就会归属于某个分支了，此时你切换到另外一个分支，将不会显示上面分支修改的文件了。</p><h5 id="10-Tag-操作（打标签）"><a href="#10-Tag-操作（打标签）" class="headerlink" title="10.Tag 操作（打标签）"></a>10.Tag 操作（打标签）</h5><p>Git 中的tag指向一次commit的id，通常用来给开发分支做一个标记，如标记一个版本号,如 v1.0.0。</p><ul><li><p>创建 Tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag tag名字</span><br></pre></td></tr></table></figure></li><li><p>创建带注释的 Tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a Tag名字 -m 注释文字</span><br></pre></td></tr></table></figure></li><li><p>为历史某个 commit 添加tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline //先获取commitid</span><br><span class="line">git tag tag名词 commitid</span><br></pre></td></tr></table></figure></li><li><p>查看 Tag 列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag               //列出所有tag列表</span><br><span class="line">git tag -l &quot;*测试*&quot;    //列出所有带“测试”的tag</span><br></pre></td></tr></table></figure></li><li><p>查看 tag 的详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show tag名字</span><br></pre></td></tr></table></figure></li><li><p>删除 tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d tag名</span><br></pre></td></tr></table></figure></li><li><p>推送 tag 到远程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin Tag名字 // 推送单个Tag</span><br><span class="line">git push origin --tags  // 推送所有本地Tag</span><br></pre></td></tr></table></figure></li><li><p>删除远程 tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/Tag名字  // 相当于将空标签推送到远程</span><br><span class="line">git push origin -d Tag名字</span><br></pre></td></tr></table></figure></li><li><p>切换到标签（此时会处于一个空的分支上）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tag名</span><br></pre></td></tr></table></figure></li><li><p>修复历史tag中的bug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0               // 查看v1.0tag下的commitid</span><br><span class="line">git checkout -b bugfix      // 新建分支用于修复bug</span><br><span class="line">git reset --hard *****      // 回滚到tag下的那次commit</span><br><span class="line">git add .                   // 添加代码到暂存区</span><br><span class="line">git commit -m &quot;修复bug&quot;      // 提交到本地仓库</span><br><span class="line">git tag v1.0.1              // 打标签</span><br><span class="line">git checkout master         // 切回master</span><br><span class="line">git merge bugfix            // 合并bugfix分支，一般会有冲突，需手动解决</span><br><span class="line">git push origin master      // 推送合并后的分支到远程</span><br><span class="line">git push origin v1.0.1      // 推送标签到远程</span><br></pre></td></tr></table></figure></li></ul><h5 id="11-Git-提交代码规范"><a href="#11-Git-提交代码规范" class="headerlink" title="11.Git 提交代码规范"></a>11.Git 提交代码规范</h5><p><code>build</code>：修改构建系统或者外部依赖项</p><p><code>ci</code>：修改 CI 配置文件或脚本</p><p><code>docs</code>：修改文档</p><p><code>feat</code>：增加新特性</p><p><code>fix</code>：修复 Bug</p><p><code>pref</code>：性能优化</p><p><code>refactor</code>：代码重构</p><p><code>style</code>：代码风格、代码规范修改</p><p><code>test</code>：测试代码修改</p><p><code>revert</code>：撤销上一次的 commit 提交</p><p><code>chore</code>：构建过程或辅助工具变动</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> 运维 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员电脑软硬件安装配置大全</title>
      <link href="/posts/b83119ec.html"/>
      <url>/posts/b83119ec.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-装硬件"><a href="#一-装硬件" class="headerlink" title="一. 装硬件"></a>一. 装硬件</h2><table><thead><tr><th align="center"></th><th align="center">型号</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">CPU+主板</td><td align="center">AMD Ryzen 7 5700G+B550I GAMING</td><td align="center">3149</td></tr><tr><td align="center">散热器</td><td align="center">利民AXP90-X53</td><td align="center">229</td></tr><tr><td align="center">内存条</td><td align="center">英睿达铂胜16*2</td><td align="center">1099</td></tr><tr><td align="center">固态硬盘</td><td align="center">三星970evoplus</td><td align="center">439</td></tr><tr><td align="center">机箱+电源</td><td align="center">迎广b1</td><td align="center">589</td></tr><tr><td align="center">显示器</td><td align="center">AOC Q24P2C</td><td align="center">1450</td></tr><tr><td align="center">键盘</td><td align="center">罗技K580</td><td align="center">197</td></tr><tr><td align="center">鼠标</td><td align="center">罗技M720</td><td align="center">225</td></tr><tr><td align="center"></td><td align="center">合计：</td><td align="center">7377</td></tr></tbody></table><h2 id="二-装系统"><a href="#二-装系统" class="headerlink" title="二. 装系统"></a>二. 装系统</h2><h2 id="三-装驱动"><a href="#三-装驱动" class="headerlink" title="三. 装驱动"></a>三. 装驱动</h2><h2 id="四-装环境"><a href="#四-装环境" class="headerlink" title="四. 装环境"></a>四. 装环境</h2><ol><li><p>Java</p><p>教程：<a href="https://blog.csdn.net/cj962464/article/details/78816275?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164836145316780271922128%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164836145316780271922128&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-78816275.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Econtrol&utm_term=java++%E5%AE%89%E8%A3%85%E4%B8%8B%E8%BD%BD&spm=1018.2226.3001.4187">Java下载安装与环境配置</a></p></li><li><p>python</p></li><li><p>Git</p></li><li><p>redis</p></li><li><p>tomcat</p></li><li><p>maven</p></li><li><p>mysql</p><pre><code>教程：[mysql下载安装配置](https://blog.csdn.net/qq_45844443/article/details/113618011?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164836870916782248580228%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164836870916782248580228&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-113618011.142^v5^pc_search_result_cache,143^v6^control&amp;utm_term=mysql++%E5%AE%89%E8%A3%85%E4%B8%8B%E8%BD%BD&amp;spm=1018.2226.3001.4187)</code></pre></li><li><p>nginx</p></li><li><p>node.js</p><p>教程：<a href="https://blog.csdn.net/sinat_29211659/article/details/102778244?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164837065316781685315565%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164837065316781685315565&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102778244.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Econtrol&utm_term=nodejs++%E5%8E%8B%E7%BC%A9%E5%8C%85%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">nodejs zip压缩版安装与配置</a></p></li></ol><p></p><h2 id="五-装软件"><a href="#五-装软件" class="headerlink" title="五. 装软件"></a>五. 装软件</h2>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo+腾讯云cos+GitHub 实现云笔记</title>
      <link href="/posts/da1f7bd8.html"/>
      <url>/posts/da1f7bd8.html</url>
      
        <content type="html"><![CDATA[<p>在日常工作学习生活中，记笔记是一个提高效率的习惯，如何让笔记更加清晰直观，可以快速随时随地的添加修改查看删除呢？有时候我们需要将自己的笔记发布上传到博客，如何直接复制一篇内容粘贴到各种博客网站(CSDN,博客园，简书等)就能显现出一篇优雅的文章呢，今天分享一个云笔记的实现方式，让你更加方便地管理自己的笔记。</p><h3 id="1-笔记软件Typora"><a href="#1-笔记软件Typora" class="headerlink" title="1. 笔记软件Typora"></a>1. 笔记软件Typora</h3><p>作为一个程序员,在学习过程中打交道的不单单是文字,还有各种语言的代码块和公式,就其内容的复杂性而言,远远不是一个word文档或者TXT文本就可以解决的。此外,更重要的是,我们往往还需要对笔记进行编辑以发布到个人的博客上(这样有助于在需要时查阅).可以看到,在许多博客都提供了md(Markdown语言)以方便我们进行编辑.然而,纵观大部分的网页版md编辑器,编辑与视图都是分离的——即需要在编辑完之后切换窗口以进行查看语法是否有误(这种情况在编辑公式时更是尤为明显)。Typora则近乎完全避免了因为频繁切屏或语法错误造成的时间效率的影响.同时它还支持图片的上传(集成<code>PicGo</code>)以及格式的转换(集成<code>Pandoc</code>),可以将.md后缀的文件转换为pdf,docx等格式的文档.更重要的是,它是完全免费的！</p><p>如果想写一篇格式优雅的文章笔记，你得首先了解<code>Markdown</code>语法，Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，可以去<a href="https://markdown.com.cn/">Markdown 官网</a>学习语法教程，基本几小时速通。</p><p>下面开始配置Typora</p><ol><li><p>进入<a href="https://typora.io/">Typora 官网</a>下载Typora，找到下载，去找它的测试版本(正式版本已经收费了，富裕的同学可以支持一波)</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403121616817.png" alt="image-20220403121616817"></p></li><li><p>配置图片上传工具PicGo,插入图片时可以自动上传到配置的服务器中</p><p>打开Typora–&gt;偏好设置–&gt;图像，插入图片时选择上传图片，勾选前两个，上传服务选择Picgo</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403111824446.png" alt="image-20220403111824446"></p></li><li><p>配置文本转换工具Pandoc,导出时可以随意导出任意格式，具体可以查看下网上这篇文章<a href="https://blog.csdn.net/horses/article/details/108536784">Pandoc：一个超级强大的文档格式转换工具</a>。打开Typora–&gt;偏好设置–&gt;导出</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403122233210.png" alt="image-20220403122233210"></p><p>剩下的功能可以慢慢自己探索，这个Typora还是比较强大的~~~</p></li></ol><h3 id="2-图床搭建（-腾讯云COS-PicGo）"><a href="#2-图床搭建（-腾讯云COS-PicGo）" class="headerlink" title="2. 图床搭建（ 腾讯云COS+PicGo）"></a>2. 图床搭建（ 腾讯云COS+PicGo）</h3><p>在笔记中经常需要插入各种图片，如果直接插入的话，图片路径就会是你本地的图片路径，笔记分享给别人或者在另一台设备上图片就会无法显示，这时候就需要图床了。</p><ul><li>图床我选择的是腾讯云COS，理由很简单，腾讯这种大厂的产品服务，应该很稳定，不至于跑路导致你文件没了，价格也很便宜（对比过阿里云OOS），新用户或者首次开通都会有免费的50G资源包，绝对是够用了。前阵子用过Gitee作为图床，因为免费嘛，而且不像Github那样国内访问慢，但这些天Gitee图片貌似突然加了防盗链的设置，让我上传的图片直接404无法访问了，属实搞心态，建议云存储还是选用安全可靠的产品。下面介绍COS开通使用步骤。</li></ul><ol><li><p>进入腾讯云开通对象存储COS服务，这里首次开通会送免费的资源包。</p></li><li><p>点击创建存储桶，相当于一个存储文件的容器</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403104830170.png" alt="image-20220403104830170"></p></li></ol><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403105013253.png" alt="image-20220403105013253"></p><p>存储访问权限要设置为公有读私有写，否则别人访问不了。然一直点下一步下一步完成就行，存储桶就创建好了。</p><ol start="3"><li><p>密钥配置</p><p>点击【密钥管理】→【访问密钥】→【新建密钥】</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403105435411.png" alt="image-20220403105435411"></p><p>生成的密钥配置PicGo时会用到</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403114138680.png" alt="image-20220403114138680"></p></li></ol><ul><li><p>图床我们有了，怎么样才能让我们在Typora中插入一张图片时，图片自动上传到图床呢？PIcGo就来了。</p><blockquote><p><code>PicGo</code> 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 <code>COS</code>、七牛云、<code>GitHub</code>、<code>sm.ms</code>、<code>Imgur</code> 等常见的免费图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷。</p></blockquote><ol><li><p>下载PicGo</p><p>首先进入<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo-Github项目地址</a>下载相应版本</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403110743404.png" alt="image-20220403110743404"></p><ol start="2"><li><p>配置PicGo</p><p>打开PicGo，图床设置，选择腾讯云COS，将上面配置的SecretId,SecretKey,APPID都复制进来，存储空间名就是你的存储桶名称，还有存储区域，这些都可以在腾讯云存储桶列表那可以看到，存储路径相当于一个文件夹，自己设置就好，点击确定并设为默认图床。</p><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/image-20220403111340287.png" alt="image-20220403111340287"></p></li></ol><p>现在基本的配置已经完成了，你在Typora中插入一张图片时，PicGo就会提示你上传成功了~</p></li></ol></li></ul><h3 id="3-笔记云管理控制GitHub"><a href="#3-笔记云管理控制GitHub" class="headerlink" title="3. 笔记云管理控制GitHub"></a>3. 笔记云管理控制GitHub</h3><p>是不是有这么一个场景，当你工作时电脑上记了很多笔记文件，然后你回家后想对笔记进行完善修改或新增，你家里电脑并没有你公司电脑保存的文件，你又想随时随地管理你的笔记文件，这时候你可以用Github作为你的笔记托管平台，公司电脑写完后下班前push一下，家里电脑pull下来进行修改新增等操作，是不是很方便~~~</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> 腾讯云 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键大全</title>
      <link href="/posts/1d7f6ac9.html"/>
      <url>/posts/1d7f6ac9.html</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器快捷键大全"><a href="#浏览器快捷键大全" class="headerlink" title="浏览器快捷键大全"></a>浏览器快捷键大全</h3><blockquote><p><a href="https://www.runoob.com/w3cnote/google-chrome-shortcuts.html">Chrome 浏览器快捷键 </a></p></blockquote><h3 id="windows10快捷键大全"><a href="#windows10快捷键大全" class="headerlink" title="windows10快捷键大全"></a>windows10快捷键大全</h3><blockquote><p><a href="https://support.microsoft.com/zh-cn/windows/windows-%E7%9A%84%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F-dcc61a57-8ff0-cffe-9796-cb9706c75eec#WindowsVersion=Windows_10">Windows 的键盘快捷方式 </a></p></blockquote><h3 id="Markdown快捷键大全"><a href="#Markdown快捷键大全" class="headerlink" title="Markdown快捷键大全"></a>Markdown快捷键大全</h3><blockquote><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p></blockquote><h3 id="JetBrains系列IDE快捷键大全"><a href="#JetBrains系列IDE快捷键大全" class="headerlink" title="JetBrains系列IDE快捷键大全"></a>JetBrains系列IDE快捷键大全</h3><blockquote><p><a href="https://www.cnblogs.com/zhuchenglin/p/10058494.html">JetBrains系列IDE快捷键大全</a></p></blockquote><p>继续补充完善中……</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记本重装系统</title>
      <link href="/posts/4fd99a88.html"/>
      <url>/posts/4fd99a88.html</url>
      
        <content type="html"><![CDATA[<p>笔记本重装系统</p><ol><li>按F1进入bios</li><li>使用键盘上的左右方向键将光标移至“<strong>security</strong>”栏目，再使用上下方向键将光标移至“<strong>secure boot</strong>”选项</li><li>进入secure boot菜单界面后，将光标移至“<strong>secure boot</strong>”选项，按回车键确认</li><li>进入secure boot菜单界面后，将光标移至“<strong>secure boot</strong>”选项，按回车键确认</li><li>接着使用左右方向键将光标移至“<strong>startup</strong>”栏目，再使用上下方向键将光标移至“<strong>uefi&#x2F;legacy boot</strong>”选项，按回车键，在弹出的选择窗口中，使用上下方向键将光标移至“<strong>both</strong>”选项，按回车键确认</li><li>接着使用左右方向键将光标移至“<strong>startup</strong>”栏目，再使用上下方向键将光标移至“<strong>uefi&#x2F;legacy boot</strong>”选项，按回车键，在弹出的选择窗口中，使用上下方向键将光标移至“<strong>both</strong>”选项，按回车键确认</li><li>重启电脑按F12 出现启动菜单，选择u盘启动</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度搜索去广告和自定义样式主题</title>
      <link href="/posts/985a88d3.html"/>
      <url>/posts/985a88d3.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3></blockquote><pre><code>平常大部分问题是中文的，搜索引擎百度用的最多，但百度搜出来时 ，前面很多条基本都是广告，给人造成很多不必要的麻烦，俗话说：“水一百度就会开，人一百度就会死”，一点都不夸张，比如，查找一个病情，平常的搜索页是这么显示的：</code></pre><p><img src="https://gitee.com/yzxcxya/picture/raw/master/picGo-upload-img/202202091644958.png" alt="image-20220209164424837"></p><p>特别的令人反感，于是，我就找了个插件来解决这个问题</p><blockquote><h3 id="插件的安装下载配置"><a href="#插件的安装下载配置" class="headerlink" title="插件的安装下载配置"></a>插件的安装下载配置</h3></blockquote><ol><li>首先下载油猴插件Tampermonkey，直接在chrome扩展商店下载安装就行。油猴插件Tampermonkey，其实就是一个脚本管理器（类似的还有暴力猴violentmonkey），它本身的功能很简单，就是安装、管理脚本，看起来似乎和上网没有太大关系。但是，通过安装脚本，它可以实现各种强大的功能，解决我们在上网时遇到的很多痛点问题！</li></ol><ul><li><p>比如视频、音频、图片、文档下载；</p></li><li><p>比如去除广告、去除网页限制；</p></li><li><p>再比如，自动连接页面、翻译、优化上网功能……</p><p>总而言之，它就是一个高度自定义的多功能插件。</p></li></ul><ol start="2"><li><p>在<a href="https://greasyfork.org/zh-CN">greasyfork网站</a>搜索AC-百度插件，得分最高的第一个就是，点进去安装就行，插件不仅支持百度首页，也支持谷歌等主流搜索引擎。<img src="https://gitee.com/yzxcxya/picture/raw/master/picGo-upload-img/202202091700593.png" alt="image-20220209170051533"></p></li><li><p>插件的配置</p><p>插件安装完成后，百度首页就会显示一个自定义按钮，</p></li></ol><p><img src="https://gitee.com/yzxcxya/picture/raw/master/picGo-upload-img/202202091702875.png" alt="image-20220209170224835"></p><p>配置项根据自己喜好配置，我的配置是这样的，</p><p><img src="https://gitee.com/yzxcxya/picture/raw/master/picGo-upload-img/202202091713899.png" alt="image-20220209171354849"></p><p>其中css样式配置代码是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**计数器的颜色样式*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.AC-CounterT</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FD9999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**右侧栏的样式-其实不开启更好看一些*/</span></span><br><span class="line"><span class="selector-id">#content_right</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">#百度搜索配置</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[baidu]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[baidu]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://img.tujidu.com/image/5fdde8468423e.jpg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>; <span class="comment">/*背景图透明度=0.8，最大1*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**隐藏首页的大图标-修复可能导致外援样式异常**/</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[baidu]</span> <span class="selector-id">#s_lg_img_new</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[baidu]</span> <span class="selector-class">.c-container</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, <span class="number">0.8</span>) <span class="meta">!important</span>; <span class="comment">/*百度搜索块体的颜色；透明度=0.1，最大1*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[baidu]</span> <span class="selector-class">.c-container</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">248</span>,<span class="number">248</span>,<span class="number">248</span>, <span class="number">0.8</span>) <span class="meta">!important</span>; <span class="comment">/*百度搜索块体 - 标题的颜色；透明度=0.1，最大1*/</span></span><br><span class="line">&#125;</span><br><span class="line">#谷歌搜索配置</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[google]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[google]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://img.tujidu.com/image/5fdde8468423e.jpg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>; <span class="comment">/*背景图透明度=0.8，最大1*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[google]</span> <span class="selector-class">.g</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, <span class="number">0.8</span>) <span class="meta">!important</span>; <span class="comment">/*百度搜索块体的颜色；透明度=0.1，最大1*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[google]</span> <span class="selector-class">.IC1Ck</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">225</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.2</span>) <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后，再次搜索，首页的广告都没了，布局展示也都完美 .</p><p><img src="https://yzxcxya.gitee.io/picture/picGo-upload-img/202202111841336.png" alt="image-20220211184101849"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 去广告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运行jar包的几种方式</title>
      <link href="/posts/7eac11ae.html"/>
      <url>/posts/7eac11ae.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>方式一： java -jar xxx.jar</strong></li></ul><p>最常用的启动jar包命令，特点：当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口，程序退出</p><ul><li><strong>方式二： java -jar xxx.jar &amp;</strong></li></ul><p>&amp;代表在后台运行 ，<code>ctrl+c</code> 后程序也会继续运行</p><ul><li><strong>方式三： nohup java -jar xxx.jar &amp;</strong></li></ul><p>nohup  即 no hang up 不挂断 ，关闭SSH客户端连接，程序不会中止运行</p><p>缺省情况下该作业的所有输出被重定向到nohup.out的文件中，如何让输出的内容重定向到指定的文件呢？</p><ul><li><strong>方式四：nohup java -jar xxx.jar &gt;aaa.log &amp;</strong></li></ul><p>command &gt;out.file 是将commandd 输出重定向到out.flie文件，即输出内容不打印到屏幕上，而是输出到out.file文件中</p><ul><li><strong>方式五：nohup java -jar spring-boot-demo.jar &gt; springboot.log 2&gt;&amp;1 &amp;</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/363c896c36dec3783bb93a3ebe312a58.png" alt="363c896c36dec3783bb93a3ebe312a58.png"></p><ul><li><p><strong>方式六：nohup java -jar spring-boot-demo.jar &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</strong></p><pre><code>      不输出日志</code></pre></li></ul><h3 id="二、nohup-和"><a href="#二、nohup-和" class="headerlink" title="二、nohup 和 &amp;"></a>二、nohup 和 &amp;</h3><h6 id="使用-后台运行程序："><a href="#使用-后台运行程序：" class="headerlink" title="使用&amp;后台运行程序："></a>使用<code>&amp;</code>后台运行程序：</h6><ul><li>结果会输出到终端</li><li>使用<code>Ctrl + C</code>，程序免疫</li><li>关闭<code>session</code>，程序关闭</li></ul><h6 id="使用nohup运行程序："><a href="#使用nohup运行程序：" class="headerlink" title="使用nohup运行程序："></a>使用<code>nohup</code>运行程序：</h6><ul><li>结果默认会输出到<code>nohup.out</code></li><li>使用<code>Ctrl + C</code>，程序关闭</li><li>关闭<code>session</code>，程序免疫</li></ul><p>平日线上经常使用<code>nohup</code>和<code>&amp;</code>配合来启动程序</p><h3 id="三、-dev-null-2-1"><a href="#三、-dev-null-2-1" class="headerlink" title="三、&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1"></a>三、&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</h3><ul><li><p><code>&gt;</code> 标准重定向符，允许我们创建一个 0KB 的空文件。它通常用于重定向一个命令的输出到一个新文件中。在没有命令的情况下使用重定向符号时，它会创建一个文件。</p></li><li><p><code>/dev/null</code> 可以看作<code>黑洞</code>，等价于一个只写文件。所有写入它的内容都会永远丢失，尝试从它那儿读取内容则什么也读不到。也就是将所有产生的日志将被丢弃</p></li><li><p><code>2&gt;&amp;1</code> 符号<code>&gt;&amp;</code>是一个整体代表将标准错误2重定向到标准输出1,如果是<code>2&gt;1</code>的话，代表将标准错误输出到文件1，而不是重定向到标准输出流</p><p>  先了解下1和2在Linux中代表什么</p><p>  当Linux执行一个程序时，会自动打开三个流</p><p>  <code>0</code>：标准输入流（默认是键盘）<br>  <code>1</code>：标准输出流（默认是屏幕）<br>  <code>2</code>：标准错误流（默认是屏幕）</p></li></ul><table><thead><tr><th>名称</th><th>代码</th><th>操作符</th><th>java中表示</th><th>Linux中文件描述符</th></tr></thead><tbody><tr><td>标准输入(stdin)</td><td>0</td><td>&lt; 或 &lt;&lt;</td><td>System.in</td><td>&#x2F;dev&#x2F;stdin -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr><tr><td>标准输出(stdout)</td><td>1</td><td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td><td>System.out</td><td>&#x2F;dev&#x2F;stdout -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;1 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr><tr><td>标准错误输出(stderr)</td><td>2</td><td>2&gt; 或 2&gt;&gt;</td><td>System.err</td><td>&#x2F;dev&#x2F;stderr -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;2 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr></tbody></table><pre><code>从上表看出，平常使用的 `echo &#39;hello&#39; &gt; a.log` 可以写成 `echo &#39;hello&#39; 1&gt; a.log`为什么2&gt;&amp;1要放在后面 ? 如下一条shell命令 `nohup java -jar app.jar &gt;log 2&gt;&amp;1 &amp; `  我们不妨把1和2都理解是一个指针,然后来看上面的语句就是这样的：    本来1-----&gt;屏幕 （1指向屏幕）    执行&gt;log后， 1-----&gt;log (1指向log)    执行2&gt;&amp;1后， 2-----&gt;1 (2指向1，而1指向log,因此2也指向了log)再来分析下`nohup java -jar app.jar 2&gt;&amp;1 &gt;log &amp;`    本来1-----&gt;屏幕 （1指向屏幕）    执行2&gt;&amp;1后， 2-----&gt;1 (2指向1，而1指向屏幕,因此2也指向了屏幕)    执行&gt;log后， 1-----&gt;log (1指向log，2还是指向屏幕)    所以这就不是我们想要的结果。每次都写&quot;&gt;log 2&gt;&amp;1&quot;太麻烦，能简写吗？可以简写成 `&amp;&gt;log` 或 `&gt;&amp;log``nohup java -jar app.jar 2&gt;&amp;1 &gt;log &amp;`   简写成：`nohup java -jar app.jar &amp;&gt;log &amp;`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 部署运维 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>便携小空调 - 为你的夏日带去清凉!</title>
      <link href="/air-conditioner/index.html"/>
      <url>/air-conditioner/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于为博客安装上了便携小空调</p></blockquote><style>.copyright-box a {  border-bottom: none !important;  padding: 0 !important;}</style><div id="air-conditioner-vue"></div><script defer data-pjax src='https://npm.elemecdn.com/anzhiyu-air-conditioner@1.0.1/index.3f125bc6.js'></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>equipment</title>
      <link href="/equipment/index.html"/>
      <url>/equipment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>即刻短文</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/json/music.json"/>
      <url>/json/music.json</url>
      
        <content type="html"><![CDATA[[{"name":"青花瓷","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc"},{"name":"稻香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc"},{"name":"晴天","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc"},{"name":"七里香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc"},{"name":"花海","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc"},{"name":"反方向的钟","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc"},{"name":"兰亭序","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc"},{"name":"说好的辛福呢","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc"},{"name":"等你下课 (with 杨瑞代)","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc"},{"name":"我落泪情绪零碎","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc"},{"name":"听妈妈的话","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc"},{"name":"明明就","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc"},{"name":"我是如此相信","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc"},{"name":"发如雪","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc"},{"name":"以父之名","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc"},{"name":"园游会","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc"},{"name":"本草纲目","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc"},{"name":"龙卷风","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc"}]]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐馆</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
