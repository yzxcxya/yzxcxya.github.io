<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杭の小站</title>
  
  
  <link href="https://yuhang.online/atom.xml" rel="self"/>
  
  <link href="https://yuhang.online/"/>
  <updated>2023-05-01T14:30:01.000Z</updated>
  <id>https://yuhang.online/</id>
  
  <author>
    <name>杭杭</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react入门</title>
    <link href="https://yuhang.online/posts/f258d3a1.html"/>
    <id>https://yuhang.online/posts/f258d3a1.html</id>
    <published>2023-05-01T07:43:01.000Z</published>
    <updated>2023-05-01T14:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GIT的一些常用命令操作"><a href="#GIT的一些常用命令操作" class="headerlink" title="GIT的一些常用命令操作"></a>GIT的一些常用命令操作</h2><blockquote><p>Git官方文档：<a href="http://git-scm.com/book/zh/v2">中文官方文档</a></p></blockquote><h5 id="1-远程仓库配置SSH-Key"><a href="#1-远程仓库配置SSH-Key" class="headerlink" title="1.远程仓库配置SSH Key"></a>1.远程仓库配置SSH Key</h5><p>Github上的远程仓库有两种使用方式，分别是HTTPS和SSH，区别是：</p><ul><li>HTTPS:零配置，可以输入密码直接克隆项目，需要输入Github的账号和密码才能push成功</li><li>SSH：需要进行额外的ssh key配置，配置完成后，才能克隆项目，访问仓库不需要输入Github的账号和密码</li></ul><blockquote><p>HTTPS认证方式虽然需要输入账户密码，但现在也不需要每次都输入。这个凭据保存需要依赖一个凭据管理器，每个操作系统平台都有自己的凭据管理器。</p><p>当我们在使用http协议push之后，账号和密码会自动保存至凭据管理器中（如果有的话），之后就不需要每次push的时候都输入了。</p><p>当保存了密码后又想要修改密码或者删除密码怎么办？</p><p>window上的git的密码是交给window进行管理的，我们可以进入‘控制面板’ - ‘用户账户’ - ‘凭证管理器’ - ‘Window凭据’-‘普通凭据’，找到git的配置，进行修改</p></blockquote><p>SSH Key的作用：实现本地仓库和Github间的加密数据传输，它由两部分组成，分别是：</p><ul><li>id_rsa（私钥文件，存放于客户端的电脑中即可)</li><li>id rsa.pub (公钥文件，需要配置到Github 中)</li></ul><p>生成SSH Key: 打开Git Bash,输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>执行命令 生成<code>ssh key</code></p><ul><li>-t = The type of the key to generate 密钥的类型</li><li>-C = comment to identify the key 用于识别这个密钥的注释（好像一般都填的邮箱）</li></ul><p>文件默认是在C盘用户目录下，我的是<code>C:\Users\用户名\.ssh</code></p><p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p><p><code>id_rsa.pub</code>就是我们要的key, 一般以<code>ssh-rsa</code>开头，以你刚才输的邮箱结尾。</p><p>登陆Github–&gt;点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;选择SSh keys上的New SSH keys–&gt;name 随便写，key就是刚才生成的文件中的所有内容。</p><p><strong>测试验证：</strong></p><p>执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能会提示<code>无法验证主机的真实性</code>是否要建立连接，输入<code>yes</code>就行了。</p><p>如果，看到：</p><blockquote><p>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.</p></blockquote><p>恭喜你，你的设置已经成功了。</p><h5 id="2-本地仓库和远程仓库进行关联操作"><a href="#2-本地仓库和远程仓库进行关联操作" class="headerlink" title="2.本地仓库和远程仓库进行关联操作"></a>2.本地仓库和远程仓库进行关联操作</h5><ul><li>本地没有现成的Git仓库</li></ul><ol><li><p>使用终端命令创建README.MD文档，并写入初始内容“初始内容”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# 初始内容&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure></li><li><p>初始化本地Git仓库，并将文件的修改提交到本地的Git仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库和远程仓库进行关联，并把远程仓库命名为origin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:yzxcxya/xxx.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库中的内容推送到远程的origin仓库中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>本地有现成的Git仓库的话直接忽略上面前两步就行</p></li><li><p>最直接的方法就是直接在某个文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 你的仓库地址</span><br></pre></td></tr></table></figure><p>运行完后直接关联了</p></li></ul><h5 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h5><table><thead><tr><th align="center">分支操作</th><th align="center">本地仓库</th><th align="center">远程仓库</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">查看分支</td><td align="center"><code>git branch</code></td><td align="center"><code>git branch -r</code></td><td align="center"><code>git branch -a</code>查看本地和远程所有分支</td></tr><tr><td align="center">创建分支</td><td align="center"><code>git branch 分支名</code></td><td align="center">本地切换到新分支并push会自动创建</td><td align="center"></td></tr><tr><td align="center">切换分支</td><td align="center"><code>git checkout 分支名</code></td><td align="center"></td><td align="center"><code>git checkout -b 分支名</code>创建并切换分支</td></tr><tr><td align="center">删除分支</td><td align="center"><code>git branch -d  分支名</code></td><td align="center"><code>git push origin -d 分支名</code>或者 <code>git push origin :分支名</code></td><td align="center">删除远程分支时，远程默认分支不能是要删除的分支名；推送一个空分支到远程分支上相当于删除远程分支</td></tr><tr><td align="center">修改分支名</td><td align="center"><code>git branch -m 旧分支名 新分支名</code></td><td align="center">修改本地分支名后推送到远程库，再删除远程库旧分支</td><td align="center"></td></tr></tbody></table><p><em><strong>合并分支场景</strong></em>：将dev分支合入master分支：</p><ol><li>本地切换到dev分支，<code>git pull origin dev</code> 拉取远程仓库dev分支最新代码</li><li>再切换到master分支，先确保master分支也是最新代码，<code>git pull</code> 一下就行</li><li>执行<code>git merge dev</code>或者<code>git rebase dev</code> ,本地的master就把本地的dev分支合并了</li><li>最后<code>git push origin master</code>，把合并后的master提交到远程master分支</li></ol><h5 id="4-git常用命令"><a href="#4-git常用命令" class="headerlink" title="4.git常用命令"></a>4.git常用命令</h5><p><code>git status [-s]</code>：查看git文件状态</p><p><code>git commit [-a] -m message</code> : 提交文件到仓库，-a表示跳过暂存步骤（git add）,修改后直接提交</p><p><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> : 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建；如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master；如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支；如果当前分支只有一个远程分支，那么主机名都可以省略；</p><p><code>git push -u origin master</code> : 如果当前分支与多个主机存在追踪关系，则可以使用-u选项关联一个默认远程仓库，这样后面就可以不加任何参数使用git push。</p><p><code>git diff [&lt;path&gt;...]</code>：什么参数都不加，默认比较工作区与暂存区的差异（<code>git add</code>后就无差异了）</p><p><code>git diff --cached [&lt;path&gt;...]</code>：比较暂存区与最新本地版本库（<code>git commit</code>后就无差异了）</p><p><code>git diff HEAD [&lt;path&gt;...]</code>：比较工作区与最新本地版本库。如果HEAD指向的是master分支，那么HEAD还可以换成master</p><p><code>git diff branch1 branch2 --stat</code>   :显示出所有有差异的文件(不详细,没有对比内容)</p><p><code>git diff branch1 branch2</code>   : 显示出所有有差异的文件的详细差异(更详细)</p><p><code>git diff branch1 branch2 具体文件路径</code> : 显示指定文件的详细差异(对比内容)</p><p><code>git remote -v</code>：查看当前关联的远程仓库地址</p><p><code>git remote show origin</code>：查看remote地址，远程分支，还有本地分支与之对应的关系等信息</p><p><code>git remote remove origin</code> ：移除当前远程仓库的连接</p><p><code>git remote add origin 远程仓库地址</code>：和远程仓库地址建立连接</p><p><code>git reset</code>：撤销本地修改</p><p><code>git stash [&lt;save &#39;message&#39;&gt;]</code> : 把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录，当前的工作目录就干净了</p><p><code>git stash list</code>：查看现有stash</p><p><code>git stash pop [&lt;stash@&#123;0&#125;&gt;]</code>：重新应用缓存的stash，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash pop stash@{$num} ， 比如第二个：git stash popstash@{1}</p><p><code>git stash apply [&lt;stash@&#123;0&#125;&gt;]</code> :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}</p><p><code>git stash drop[&lt;stash@&#123;0&#125;&gt;]</code>：删除stash，不带参数默认最近的</p><p><code>git stash clear</code>：删除所有缓存的stash</p><p><code>git stash show [&lt;stash@&#123;0&#125;&gt;] [-p]</code>：查看最近stash的diff</p><p><code>git log -num --graph</code>: 查看git提交日志，num为显示几条，–graph是否用图形界面显示</p><p><code>git log --oneline</code>: 输出 简写commitid,提交说明</p><p><code>git log --pretty=format:&quot;%h - %an, %ad ,%s&quot; --graph</code>: 输出 简写commitid,作者名,提交日期,提交说明</p><blockquote><p>git log 更多用法可以看网上这篇文章：<a href="https://www.cnblogs.com/ay2021/p/15160893.html">git log 命令详解</a>，讲得特别特别详细</p></blockquote><h5 id="5-git冲突"><a href="#5-git冲突" class="headerlink" title="5.git冲突"></a>5.git冲突</h5><p>一般来说，两个人修改了同一个文件（不管是同一文件不同行还是同一行），你<code>git pull</code>时就会有冲突错误报出来，然后在你冲突的文件，寻找用=====隔开的两部分，HEAD是你的内容，另外一部分是repos的内容，然后手工修改保留你想要的部分，在<code>git add</code> 和<code>git commit</code>然后再<code>git push</code>上去就好了。</p><h5 id="6-git流程"><a href="#6-git流程" class="headerlink" title="6.git流程"></a>6.git流程</h5><p><img src="https://picture-bucket-1306212000.cos.ap-nanjing.myqcloud.com/markdown/git.jpg" alt="git"></p><h5 id="7-撤销修改"><a href="#7-撤销修改" class="headerlink" title="7.撤销修改"></a>7.撤销修改</h5><ul><li><p>未使用 git add 缓存代码时：</p><p>放弃某个文件修改（不要忘记中间“–”，不写就是建初分支了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filepathname</span><br></pre></td></tr></table></figure><p>放弃所有文件修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout . </span><br></pre></td></tr></table></figure><p>此命令用来放弃掉所有还没有加入到缓存区（就是 <code>git add</code> 命令）的修改：包括内容修改与文件删除。但是此命令不会删除掉新建的文件。因为刚新建的文件还没有加入到git的管理系统中，所以对于git是未知的，自己手动删除就可以了。</p></li><li><p>使用了 git add 缓存了代码（取消暂存文件）：</p><p>放弃某个文件的缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD filepathname</span><br></pre></td></tr></table></figure><p>放弃所有文件缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure><p>此命令用来清除 git 对于文件修改的缓存。相当于撤销 <code>git add</code> 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了 <code>git add</code> 前的状态。继续使用上面add前的操作，就可以放弃本地的修改。</p></li><li><p>已经用 git commit 提交了代码：</p><p>回退到上一次commit的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^    // HEAD^表示上一个版本，同HEAD~1, HEAD^^表示上上个版本,同HEAD~2</span><br></pre></td></tr></table></figure><p>向前回退到第三个版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~3 </span><br></pre></td></tr></table></figure><p>回退1.txt这个文件到上一版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^ 1.txt</span><br></pre></td></tr></table></figure><p>回退到任意版本（可以使用 git log命令来查看git的提交历史，commit 后面的一串字符就是commit ID）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commitId</span><br></pre></td></tr></table></figure><p>回退到和远程库一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset origin/master </span><br></pre></td></tr></table></figure></li><li><p>撤销远程提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset [--hard] 上个commitid</span><br><span class="line">git push -f  // 强制提交</span><br></pre></td></tr></table></figure></li><li><p>回退的几个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. git reset --mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息</span><br><span class="line">2. git reset --soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</span><br><span class="line">3. git reset --hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</span><br></pre></td></tr></table></figure></li><li><p>替换 commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交</span><br><span class="line">$ git commit -m &#x27;第一次提交&#x27;</span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit -m &#x27;代替第一次提交&#x27; --amend</span><br><span class="line">此时第一次提交信息就会被替换掉</span><br></pre></td></tr></table></figure></li></ul><h5 id="8-git放弃跟踪某些文件"><a href="#8-git放弃跟踪某些文件" class="headerlink" title="8.git放弃跟踪某些文件"></a>8.git放弃跟踪某些文件</h5><p>一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以在工程下新建<code>.gitignore</code>文件,并在其中添加要忽略的文件或目录，每行表示一个忽略规则，像下面一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target/</span><br><span class="line">*.iml</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure><p>.gitignore格式规范如下：</p><blockquote><ul><li>以#开头的是注释</li><li>以/结尾的是目录</li><li>以/开头防止递归,只作用当前目录</li><li>以!开头表示取反</li><li>星号* 匹配零个或多个任意字符</li><li>[abc] 匹配任何哟个列在方括号中的字符</li><li>问号 ？匹配一个字符</li><li>方括号中使用短划线分割两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</li><li>两个星号** 表示匹配任意中间目录，比如（a/**/z 可以匹配a/z，a/b/z 或者 a/b/c/z）</li></ul></blockquote><p><em><strong>.gitignore不生效？</strong></em></p><blockquote><p>.gitignore只能忽略原来没有被跟踪的文件，因此跟踪过的文件是无法被忽略的，解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m ‘xxx’</span><br></pre></td></tr></table></figure><h5 id="9-git分支与工作区、暂存区关系"><a href="#9-git分支与工作区、暂存区关系" class="headerlink" title="9.git分支与工作区、暂存区关系"></a>9.git分支与工作区、暂存区关系</h5><p>文件不管新增修改，在<code>git add</code> 前后在任何一个分支都是全局的，在工作区都可见，切换分支不会影响它。</p><p>文件在<code>git commit</code>后，就会归属于某个分支了，此时你切换到另外一个分支，将不会显示上面分支修改的文件了。</p><h5 id="10-Tag-操作（打标签）"><a href="#10-Tag-操作（打标签）" class="headerlink" title="10.Tag 操作（打标签）"></a>10.Tag 操作（打标签）</h5><p>Git 中的tag指向一次commit的id，通常用来给开发分支做一个标记，如标记一个版本号,如 v1.0.0。</p><ul><li><p>创建 Tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag tag名字</span><br></pre></td></tr></table></figure></li><li><p>创建带注释的 Tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a Tag名字 -m 注释文字</span><br></pre></td></tr></table></figure></li><li><p>为历史某个 commit 添加tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline //先获取commitid</span><br><span class="line">git tag tag名词 commitid</span><br></pre></td></tr></table></figure></li><li><p>查看 Tag 列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag               //列出所有tag列表</span><br><span class="line">git tag -l &quot;*测试*&quot;    //列出所有带“测试”的tag</span><br></pre></td></tr></table></figure></li><li><p>查看 tag 的详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show tag名字</span><br></pre></td></tr></table></figure></li><li><p>删除 tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d tag名</span><br></pre></td></tr></table></figure></li><li><p>推送 tag 到远程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin Tag名字 // 推送单个Tag</span><br><span class="line">git push origin --tags  // 推送所有本地Tag</span><br></pre></td></tr></table></figure></li><li><p>删除远程 tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/Tag名字  // 相当于将空标签推送到远程</span><br><span class="line">git push origin -d Tag名字</span><br></pre></td></tr></table></figure></li><li><p>切换到标签（此时会处于一个空的分支上）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tag名</span><br></pre></td></tr></table></figure></li><li><p>修复历史tag中的bug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0               // 查看v1.0tag下的commitid</span><br><span class="line">git checkout -b bugfix      // 新建分支用于修复bug</span><br><span class="line">git reset --hard *****      // 回滚到tag下的那次commit</span><br><span class="line">git add .                   // 添加代码到暂存区</span><br><span class="line">git commit -m &quot;修复bug&quot;      // 提交到本地仓库</span><br><span class="line">git tag v1.0.1              // 打标签</span><br><span class="line">git checkout master         // 切回master</span><br><span class="line">git merge bugfix            // 合并bugfix分支，一般会有冲突，需手动解决</span><br><span class="line">git push origin master      // 推送合并后的分支到远程</span><br><span class="line">git push origin v1.0.1      // 推送标签到远程</span><br></pre></td></tr></table></figure></li></ul><h5 id="11-Git-提交代码规范"><a href="#11-Git-提交代码规范" class="headerlink" title="11.Git 提交代码规范"></a>11.Git 提交代码规范</h5><p><code>build</code>：修改构建系统或者外部依赖项</p><p><code>ci</code>：修改 CI 配置文件或脚本</p><p><code>docs</code>：修改文档</p><p><code>feat</code>：增加新特性</p><p><code>fix</code>：修复 Bug</p><p><code>pref</code>：性能优化</p><p><code>refactor</code>：代码重构</p><p><code>style</code>：代码风格、代码规范修改</p><p><code>test</code>：测试代码修改</p><p><code>revert</code>：撤销上一次的 commit 提交</p><p><code>chore</code>：构建过程或辅助工具变动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GIT的一些常用命令操作&quot;&gt;&lt;a href=&quot;#GIT的一些常用命令操作&quot; class=&quot;headerlink&quot; title=&quot;GIT的一些常用命令操作&quot;&gt;&lt;/a&gt;GIT的一些常用命令操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Git官方文档：&lt;a href=&quot;</summary>
      
    
    
    
    <category term="web" scheme="https://yuhang.online/categories/web/"/>
    
    <category term="前端" scheme="https://yuhang.online/categories/web/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>vue入门</title>
    <link href="https://yuhang.online/posts/5d8ad28b.html"/>
    <id>https://yuhang.online/posts/5d8ad28b.html</id>
    <published>2023-05-01T03:35:09.000Z</published>
    <updated>2023-05-01T14:30:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-安装-nginx"><a href="#Linux-安装-nginx" class="headerlink" title="Linux 安装 nginx"></a>Linux 安装 nginx</h2><h4 id="一、安装依赖（安装的跳过）"><a href="#一、安装依赖（安装的跳过）" class="headerlink" title="一、安装依赖（安装的跳过）"></a>一、安装依赖（安装的跳过）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl-devel</span><br></pre></td></tr></table></figure><h4 id="二、下载-nginx-稳定版"><a href="#二、下载-nginx-稳定版" class="headerlink" title="二、下载 nginx 稳定版"></a>二、下载 nginx 稳定版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.16.1.tar.gz </span><br></pre></td></tr></table></figure><p>该命令会下载到此刻用户所在的目录</p><p>或者去<a href="http://nginx.org/en/download.html">nginx 官网</a> 下载上传</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930151244240.png" alt="image-20220930151244240"></p><h4 id="三、解压"><a href="#三、解压" class="headerlink" title="三、解压"></a>三、解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.22.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h4><p>进入解压目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /nginx-1.22.0</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 需要使用https执行指令</span><br><span class="line">./configure  --with-http_ssl_module</span><br><span class="line"># 需要使用stream</span><br><span class="line">./configure --with-stream</span><br><span class="line"># 需要https、stream指令（个人配置）</span><br><span class="line">./configure  --with-http_ssl_module --with-stream</span><br><span class="line"># 不需要使用https执行</span><br><span class="line">./configure </span><br></pre></td></tr></table></figure><ul><li>编译如果提示 <code>./configure: error: the HTTP rewrite module requires the PCRE library.</code>，就是第一步中的依赖没有完全安装完，执行<code>yum -y install pcre-devel</code>后重新编译</li></ul><h4 id="五、编译安装"><a href="#五、编译安装" class="headerlink" title="五、编译安装"></a>五、编译安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install </span><br></pre></td></tr></table></figure><p>补充查看编辑参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看编译参数</span><br><span class="line">./configure --help | more </span><br></pre></td></tr></table></figure><p>这时同级目录外多了个nginx目录</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930152935109.png" alt="image-20220930152935109"></p><h4 id="六、启动nginx"><a href="#六、启动nginx" class="headerlink" title="六、启动nginx"></a>六、启动nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd ../nginx/sbin</span><br><span class="line"># 默认配置文件启动</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"># 指定配置文件启动</span><br><span class="line">./nginx -c  /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 停止命令</span><br><span class="line">./nginx -s stop</span><br><span class="line"># 重启命令</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>打开浏览器访问主站，可以看到</p><p><img src="C:\Users\yuhh\AppData\Roaming\Typora\typora-user-images\image-20220930153217181.png" alt="image-20220930153217181"></p><h4 id="七、开机自动启动nginx"><a href="#七、开机自动启动nginx" class="headerlink" title="七、开机自动启动nginx"></a>七、开机自动启动nginx</h4><p>编辑文件<code>/etc/rc.d/rc.local</code>在后面添加内容</p><blockquote><p>在Linux系统中我们有可能需要某些命令在系统启动的时候自动运行，便可利用文件：/etc/rc.d/rc.local</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 需要用绝对路径</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>ll查看下rc.local文件，如果<code>不是绿色</code>表示没有执行权限，则执行指令<code>chmod +x /etc/rc.d/rc.local</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-安装-nginx&quot;&gt;&lt;a href=&quot;#Linux-安装-nginx&quot; class=&quot;headerlink&quot; title=&quot;Linux 安装 nginx&quot;&gt;&lt;/a&gt;Linux 安装 nginx&lt;/h2&gt;&lt;h4 id=&quot;一、安装依赖（安装的跳过）&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="web" scheme="https://yuhang.online/categories/web/"/>
    
    <category term="前端" scheme="https://yuhang.online/categories/web/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://yuhang.online/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://yuhang.online/tags/vue/"/>
    
  </entry>
  
</feed>
